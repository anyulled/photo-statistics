name: Rust Build & SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Cinstrument-coverage"
  LLVM_PROFILE_FILE: "target/coverage/%m.profraw"

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: code-coverage 
          path: .
      - name: Inspect Coverage Report
        run: cat coverage.xml
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCANNER_OPTS: "-Dsonar.coverageReportPaths=coverage.xml"

  build:
    name: Rust Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y lcov jq
          rustup component add llvm-tools-preview
          cargo install grcov
      
      - name: Build Rust Project
        run: |
          for i in {1..5}; do
            cargo build && break
            sleep 10
          done

      - name: Run Rust Tests with Coverage
        run: |
          mkdir -p target/coverage
          cargo test --verbose --no-fail-fast

      - name: Generate Coverage Report
        run: |
          grcov target/coverage -s . \
            --binary-path ./target/debug \
            --branch \
            -t cobertura --ignore-not-existing \
            -o coverage.xml        

      - name: Upload Coverage as Artifact (Optional)
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.xml
          compression-level: 6
          retention-days: 7
